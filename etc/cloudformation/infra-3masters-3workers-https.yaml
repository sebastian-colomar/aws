#########################################################################
#      Copyright (C) 2020        Sebastian Francisco Colomar Bauza      #
#      SPDX-License-Identifier:  GPL-2.0-only                           #
#########################################################################

---

AWSTemplateFormatVersion: "2010-09-09"

Description: This template creates a new VPC and deploys a HA cluster in AWS

#============================================================
# UI Definition
#============================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Cluster Common Configuration
        Parameters:
          - BranchAWS
          - NodeInstallUrlPath
          - NodeInstallUrlFileMaster
          - NodeInstallUrlFileWorker
      -
        Label:
          default: Cluster Master Configuration
        Parameters:
          - InstanceMasterImageId
          - InstanceMasterInstanceType
      -
        Label:
          default: Cluster Worker Configuration
        Parameters:
          - InstanceWorkerImageId
          - InstanceWorkerInstanceType
      -
        Label:
          default: Network Configuration
        Parameters:
          - HostedZoneName
          - HttpCodeTargetGroupWorker
          - IpProtocolListenerWorker
          - PortListenerWorker
          - PortTargetGroupWorker
          - PrivateIpAddressInstanceMaster1
          - PrivateIpAddressInstanceMaster2
          - PrivateIpAddressInstanceMaster3
          - ProtocolListenerWorker
          - ProtocolTargetGroupWorker
          - RecordSetNameWorker
          - SecurityGroupCidrIpWorker
          - SubnetCidrBlockPrivate1
          - SubnetCidrBlockPrivate2
          - SubnetCidrBlockPrivate3
          - SubnetCidrBlockPublic1
          - SubnetCidrBlockPublic2
          - SubnetCidrBlockPublic3
          - VPCCidrBlock
      -
        Label:
          default: Security
        Parameters:
          - Identifier
          
    ParameterLabels:
      BranchAWS:
        default: The branch of the git repo to download the script for the common install of the nodes
      HostedZoneName:
        default: The name of the hosted zone that you want to create records in
      Identifier:
        default: The Identifier of the certificate you want to use
      InstanceMasterImageId:
        default: AMI to use for Cluster Master Instances
      InstanceMasterInstanceType:
        default: Cluster Master Instance Size
      InstanceWorkerImageId:
        default: AMI to use for Cluster Worker Instances
      InstanceWorkerInstanceType:
        default: Cluster Worker Instance Size
      IpProtocolListenerWorker:
        default: The IP protocol for Listener Worker
      HttpCodeTargetGroupWorker:
        default: The HTTP codes to use when checking for a successful response from Worker Group
      NodeInstallUrlPath:
        default: The URL path to download the script for the common install of the nodes
      NodeInstallUrlFileMaster:
        default: The name of the script for the common install of the Master nodes
      NodeInstallUrlFileWorker:
        default: The name of the script for the common install of the Worker nodes
      PortListenerWorker:
        default: The listening port for Listener Worker
      PortTargetGroupWorker:
        default: The internal listening port for Target Group Worker
      PrivateIpAddressInstanceMaster1:
        default: The private IP address for Master 1
      PrivateIpAddressInstanceMaster2:
        default: The private IP address for Master 2
      PrivateIpAddressInstanceMaster3:
        default: The private IP address for Master 3
      ProtocolListenerWorker:
        default: The protocol for Listener Worker
      ProtocolTargetGroupWorker:
        default: The internal protocol for Target Group Worker
      RecordSetNameWorker:
        default: The name of the Record Set for Worker service
      SecurityGroupCidrIpWorker:
        default: Allowed CIDR for ALB Cluster Worker Access
      SubnetCidrBlockPrivate1:
        default: Private Subnet 1 CIDR
      SubnetCidrBlockPrivate2:
        default: Private Subnet 2 CIDR
      SubnetCidrBlockPrivate3:
        default: Private Subnet 3 CIDR
      SubnetCidrBlockPublic1:
        default: Public Subnet 1 CIDR
      SubnetCidrBlockPublic2:
        default: Public Subnet 2 CIDR
      SubnetCidrBlockPublic3:
        default: Public Subnet 3 CIDR
      VPCCidrBlock:
        default: VPC CIDR
                
Parameters:

  BranchAWS:
    Default: "ubuntu22"
    Description: >
      The branch of the git repo to download the script for the common install of the nodes.
    Type: String
    
  HostedZoneName:
#    Default: 'sebastian-colomar.es'
    Default: 'sebastian-colomar.com'
    Description: >
      The name of the hosted zone that you want to create records in.
    Type: String

  Identifier:
#    Default: '31ea6050-d1a0-4e91-a37b-ed862904188c' #IRELAND #sebastian-colomar.com
    Default: '62bfcd52-7375-4ffc-9ed8-345488c71b41' #MUMBAI #sebastian-colomar.com
    Description: >
      The Identifier of the certificate you want to use.
    Type: String

  InstanceMasterImageId:
#    Default: 'ami-026f33d38b6410e30' #MUMBAI #CENTOS7
#    Default: 'ami-003b12a9a1ee83922' #MUMBAI #RHEL7
#    Default: 'ami-0a9d27a9f4f5c0efc' #MUMBAI #RHEL8
#    Default: 'ami-0db0b3ab7df22e366' #MUMBAI #UBUNTU18
    Default: 'ami-0287a05f0ef0e9d9a' #MUMBAI #UBUNTU22
    Description: >
      Select AMI to use for the Cluster Master instances. 
      When it's left blank, the default AMI for your AWS region will be used. 
      When setting an AMI, it must be available in your current region.
    Type: String
    
  InstanceMasterInstanceType:
    Default: 't3a.small'
    Description: >
      Select Amazon EC2 instance type for the Cluster Master instances.
    Type: String
    
  InstanceWorkerImageId:
#    Default: 'ami-026f33d38b6410e30' #MUMBAI #CENTOS7
#    Default: 'ami-003b12a9a1ee83922' #MUMBAI #RHEL7
#    Default: 'ami-0a9d27a9f4f5c0efc' #MUMBAI #RHEL8
#    Default: 'ami-0db0b3ab7df22e366' #MUMBAI #UBUNTU18
    Default: 'ami-0287a05f0ef0e9d9a' #MUMBAI #UBUNTU22
    Description: >
      Select AMI to use for the Cluster Worker instances. 
      When it's left blank, the default AMI for your AWS region will be used. 
      When setting an AMI, it must be available in your current region.
    Type: String
    
  InstanceWorkerInstanceType:
    Default: 't3a.micro'
    Description: >
      Select Amazon EC2 instance type for the Cluster Worker instances.
    Type: String
    
  IpProtocolListenerWorker:
    Default: tcp
    Description: >
      The IP protocol for Listener Worker.
    Type: String
    
  HttpCodeTargetGroupWorker:
    Default: "200-399"
    Description: >
      The HTTP codes to use when checking for a successful response from Worker Group.
    Type: String
    
  NodeInstallUrlPath:
    Default: "https://github.com/sebastian-colomar/aws"
    Description: >
      The URL path to download the script for the common install of the nodes.
    Type: String
    
  NodeInstallUrlFileMaster:
    Default: bin/install-ssm-rhel.sh
    Description: >
      The name of the script for the common install of the Master nodes.
    Type: String
    
  NodeInstallUrlFileWorker:
    Default: bin/install-ssm-rhel.sh
    Description: >
      The name of the script for the common install of the Worker nodes.
    Type: String
    
  PortListenerWorker:
    Default: 443
    Description: >
      The listening port for Listener Worker.
    Type: Number
    
  PortTargetGroupWorker:
    Default: 30000
    Description: >
      The internal listening port for Target Group Worker.
    Type: Number
    
  PrivateIpAddressInstanceMaster1:
    Default: 10.168.1.100
    Description: >
      The private IP address for Master 1.
    Type: String
    
  PrivateIpAddressInstanceMaster2:
    Default: 10.168.3.100
    Description: >
      The private IP address for Master 2.
    Type: String
    
  PrivateIpAddressInstanceMaster3:
    Default: 10.168.5.100
    Description: >
      The private IP address for Master 3.
    Type: String
    
  ProtocolListenerWorker:
    Default: HTTPS
    Description: >
      The protocol for Listener Worker.
    Type: String
    
  ProtocolTargetGroupWorker:
    Default: HTTP
    Description: >
      The internal protocol for Target Group Worker.
    Type: String

  RecordSetNameWorker:
    Default: myapp
    Description: >
      The name of the Record Set for Worker service.
      It needs to be unique in the sub-domain.
    Type: String
  
  SecurityGroupCidrIpWorker:
    Default: 0.0.0.0/0
    Description: >
      Allowed CIDR block for external web access to the Cluster Worker Load Balancer. 
      It defines the block of IPs that can access the Cluster Worker Load Balancer and, consequently, the application servers. 
      Set it to 0.0.0.0/0 to make it accessible from anywhere.
    Type: String
    
  SubnetCidrBlockPrivate1:
    Default: 10.168.1.0/24
    Description: >
      CIDR block for private subnet located in Availability Zone 1. 
      All resources located on this subnet are provided an IP within this address block. 
    Type: String
    
  SubnetCidrBlockPrivate2:
    Default: 10.168.3.0/24
    Description: >
      CIDR block for private subnet located in Availability Zone 2. 
      All resources located on this subnet are provided an IP within this address block. 
    Type: String
    
  SubnetCidrBlockPrivate3:
    Default: 10.168.5.0/24
    Description: >
      CIDR block for private subnet located in Availability Zone 3. 
      All resources located on this subnet are provided an IP within this address block. 
    Type: String
    
  SubnetCidrBlockPublic1:
    Default: 10.168.2.0/24
    Description: >
      CIDR block for public (DMZ) subnet located in Availability Zone 1. 
      All resources located on this subnet are provided an IP within this address block. 
    Type: String
    
  SubnetCidrBlockPublic2:
    Default: 10.168.4.0/24
    Description: >
      CIDR block for public (DMZ) subnet located in Availability Zone 2. 
      All resources located on this subnet are provided an IP within this address block. 
    Type: String
    
  SubnetCidrBlockPublic3:
    Default: 10.168.6.0/24
    Description: >
      CIDR block for public (DMZ) subnet located in Availability Zone 3. 
      All resources located on this subnet are provided an IP within this address block. 
    Type: String
    
  VPCCidrBlock:
    Default: 10.168.0.0/16
    Description: >
      CIDR block for the VPC. All the subnets and resources will have an IP within this address block.
    Type: String
    
#============================================================
# Resources
#============================================================
Resources:

  EIP1:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP

  EIP2:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP

  EIP3:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP

  InstanceMaster1:
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceMasterImageId
      InstanceType: !Ref InstanceMasterInstanceType
      PrivateIpAddress: !Ref PrivateIpAddressInstanceMaster1
      SecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
      SubnetId: !Ref SubnetPrivate1
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            sudo yum install -y git
            git clone --single-branch --branch ${BranchAWS} ${NodeInstallUrlPath} GitRepository
            chmod +x GitRepository/${NodeInstallUrlFileMaster}
            ./GitRepository/${NodeInstallUrlFileMaster}
            rm --force --recursive GitRepository
    Type: AWS::EC2::Instance
            
  InstanceMaster2:
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceMasterImageId
      InstanceType: !Ref InstanceMasterInstanceType
      PrivateIpAddress: !Ref PrivateIpAddressInstanceMaster2
      SecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
      SubnetId: !Ref SubnetPrivate2
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            sudo yum install -y git
            git clone --single-branch --branch ${BranchAWS} ${NodeInstallUrlPath} GitRepository
            chmod +x GitRepository/${NodeInstallUrlFileMaster}
            ./GitRepository/${NodeInstallUrlFileMaster}
            rm --force --recursive GitRepository
    Type: AWS::EC2::Instance
            
  InstanceMaster3:
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceMasterImageId
      InstanceType: !Ref InstanceMasterInstanceType
      PrivateIpAddress: !Ref PrivateIpAddressInstanceMaster3
      SecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
      SubnetId: !Ref SubnetPrivate3
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            sudo yum install -y git
            git clone --single-branch --branch ${BranchAWS} ${NodeInstallUrlPath} GitRepository
            chmod +x GitRepository/${NodeInstallUrlFileMaster}
            ./GitRepository/${NodeInstallUrlFileMaster}
            rm --force --recursive GitRepository
    Type: AWS::EC2::Instance
            
  InstanceProfile:
    Properties:
      Roles: [!Ref Role]
    Type: AWS::IAM::InstanceProfile

  InstanceWorker1:
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceWorkerImageId
      InstanceType: !Ref InstanceWorkerInstanceType
      SubnetId: !Ref SubnetPrivate1
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            sudo yum install -y git
            git clone --single-branch --branch ${BranchAWS} ${NodeInstallUrlPath} GitRepository
            chmod +x GitRepository/${NodeInstallUrlFileMaster}
            ./GitRepository/${NodeInstallUrlFileMaster}
            rm --force --recursive GitRepository
    Type: AWS::EC2::Instance

  InstanceWorker2:
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceWorkerImageId
      InstanceType: !Ref InstanceWorkerInstanceType
      SubnetId: !Ref SubnetPrivate2
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            sudo yum install -y git
            git clone --single-branch --branch ${BranchAWS} ${NodeInstallUrlPath} GitRepository
            chmod +x GitRepository/${NodeInstallUrlFileMaster}
            ./GitRepository/${NodeInstallUrlFileMaster}
            rm --force --recursive GitRepository
    Type: AWS::EC2::Instance

  InstanceWorker3:
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceWorkerImageId
      InstanceType: !Ref InstanceWorkerInstanceType
      SubnetId: !Ref SubnetPrivate3
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            sudo yum install -y git
            git clone --single-branch --branch ${BranchAWS} ${NodeInstallUrlPath} GitRepository
            chmod +x GitRepository/${NodeInstallUrlFileMaster}
            ./GitRepository/${NodeInstallUrlFileMaster}
            rm --force --recursive GitRepository
    Type: AWS::EC2::Instance

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  ListenerWorker:
    Properties: 
      Certificates:
        - CertificateArn: !Sub 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${Identifier}'
      DefaultActions: 
        - ForwardConfig:
            TargetGroups:
            - TargetGroupArn: !Ref TargetGroupWorker
              Weight: 1
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerWorker
      Port: !Ref PortListenerWorker
      Protocol: !Ref ProtocolListenerWorker
    Type: AWS::ElasticLoadBalancingV2::Listener
 
  LoadBalancerWorker:
    Properties: 
      SecurityGroups:
        - !GetAtt VPC.DefaultSecurityGroup
        - !Ref SecurityGroupWorker
      Subnets: 
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
        - !Ref SubnetPublic3
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        
  NatGateway1:
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref SubnetPublic1
    Type: AWS::EC2::NatGateway

  NatGateway2:
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref SubnetPublic2
    Type: AWS::EC2::NatGateway

  NatGateway3:
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt EIP3.AllocationId
      SubnetId: !Ref SubnetPublic3
    Type: AWS::EC2::NatGateway

  RecordSetWorker:
    Properties: 
      AliasTarget: 
        DNSName: !GetAtt LoadBalancerWorker.DNSName
        HostedZoneId: !GetAtt LoadBalancerWorker.CanonicalHostedZoneID
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub '${RecordSetNameWorker}.${HostedZoneName}'
      Type: A
    Type: AWS::Route53::RecordSet
      
  Role:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
    Type: AWS::IAM::Role

  RoutePrivate1:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref RouteTablePrivate1
    Type: AWS::EC2::Route

  RoutePrivate2:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
      RouteTableId: !Ref RouteTablePrivate2
    Type: AWS::EC2::Route

  RoutePrivate3:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3
      RouteTableId: !Ref RouteTablePrivate3
    Type: AWS::EC2::Route

  RoutePublic:
    DependsOn: [VPCGatewayAttachment]
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic
    Type: AWS::EC2::Route

  RouteTablePrivate1:
    Properties:
      VpcId: !Ref VPC
    Type: AWS::EC2::RouteTable

  RouteTablePrivate2:
    Properties:
      VpcId: !Ref VPC
    Type: AWS::EC2::RouteTable

  RouteTablePrivate3:
    Properties:
      VpcId: !Ref VPC
    Type: AWS::EC2::RouteTable

  RouteTablePublic:
    Properties:
      VpcId: !Ref VPC
    Type: AWS::EC2::RouteTable

  SecurityGroupWorker:
    Properties:
      GroupDescription: Allow access to the applications running on the cluster of Worker for Service
      SecurityGroupIngress:
      - 
        CidrIp: !Ref SecurityGroupCidrIpWorker
        FromPort: !Ref PortListenerWorker
        IpProtocol: !Ref IpProtocolListenerWorker
        ToPort: !Ref PortListenerWorker
      VpcId: !Ref VPC
    Type: AWS::EC2::SecurityGroup
      
  SubnetPrivate1:
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPrivate1
      VpcId: !Ref VPC
    Type: AWS::EC2::Subnet

  SubnetPrivate2:
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPrivate2
      VpcId: !Ref VPC
    Type: AWS::EC2::Subnet

  SubnetPrivate3:
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPrivate3
      VpcId: !Ref VPC
    Type: AWS::EC2::Subnet

  SubnetPublic1:
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPublic1
      VpcId: !Ref VPC
    Type: AWS::EC2::Subnet

  SubnetPublic2:
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPublic2
      VpcId: !Ref VPC
    Type: AWS::EC2::Subnet

  SubnetPublic3:
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPublic3
      VpcId: !Ref VPC
    Type: AWS::EC2::Subnet

  SubnetRouteTableAssociationPrivate1:
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      SubnetId: !Ref SubnetPrivate1
    Type: AWS::EC2::SubnetRouteTableAssociation

  SubnetRouteTableAssociationPrivate2:
    Properties:
      RouteTableId: !Ref RouteTablePrivate2
      SubnetId: !Ref SubnetPrivate2
    Type: AWS::EC2::SubnetRouteTableAssociation

  SubnetRouteTableAssociationPrivate3:
    Properties:
      RouteTableId: !Ref RouteTablePrivate3
      SubnetId: !Ref SubnetPrivate3
    Type: AWS::EC2::SubnetRouteTableAssociation

  SubnetRouteTableAssociationPublic1:
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic1
    Type: AWS::EC2::SubnetRouteTableAssociation

  SubnetRouteTableAssociationPublic2:
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic2
    Type: AWS::EC2::SubnetRouteTableAssociation

  SubnetRouteTableAssociationPublic3:
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic3
    Type: AWS::EC2::SubnetRouteTableAssociation

  TargetGroupWorker:
    Properties: 
      Matcher:
        HttpCode: !Ref HttpCodeTargetGroupWorker
      Port: !Ref PortTargetGroupWorker
      Protocol: !Ref ProtocolTargetGroupWorker
      Targets: 
        -   Id: !Ref InstanceWorker1
        -   Id: !Ref InstanceWorker2
        -   Id: !Ref InstanceWorker3
      TargetType: instance
      VpcId: !Ref VPC
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

  VPC:
    Properties:
      CidrBlock: !Ref VPCCidrBlock
    Type: "AWS::EC2::VPC"

  VPCGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Type: AWS::EC2::VPCGatewayAttachment
